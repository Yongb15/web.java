컬렉션 프레임워크

JAVA -> C
여러 개의 데이터를 저장할 수 있는 구조 -> 자료 구조

리스트(Linked list) -> 매번 만들어야 됨

ArrayList
- 배열을 기반으로 하는 자료구조
- index를 갖고 데이터를 추가하거나 조회, 삭제, 수정하는 것이 가능
- 개수의 제한이 없어서 넣는대로 들어간다.
- 대용량의 데이터를 처리하는데 유용

HashSet
- 중복되는 값이 들어가지 않음
- 넣는 순서대로 들어가지 않음
- 수학의 집합의 개념을 코드로 구현

람다식(lamda-expression)
- JDK 1.8부터 함수형 프로그래밍 '람다식'을 지원
- 람다식은 이름이 없는 익명 함수를 만들기 위한 표현식을 말함
- 자바는 객체를 기반으로 프로그램을 구성하는 객체지향 프로그래밍
- 클래스를 먼저 생성 후 클래스 안에 메서드를 정의하고 객체를 만들어 사용
- 함수형 프로그래밍은 객체 지향 프로그램과 달리 함수만 구현하고 실행할 수 있는 개발방식

람다식이 도입된 이유
- 함수형 프로그래밍 방식을 도입을 하기 위해 완벽한 함수형 프로그래밍의 구현은 안됨

람다식 문법
- 람다식 문법은 기존의 자바 문법과는 달라서 객체 지향 프로그래밍에 익숙한 개발자들은 다소 생소할 수 있다.
- 문법이 매우 간결해지고 원하는 결과를 쉽게 집계할 수 있어 익숙해지면 큰 장점이 있다.

public int add(int x, int y) {
	reutrn x + y;
}

메서드의 이름과 반환형을 제거하고 화살표(->)를 이용해 구현
(int x, int y) -> {return x + y};

소괄호 생략하기
- 람다식 문법에서는 매개변수의 자료형을 생략 가능
- 매개변수가 한 개인 경우 소괄호도 생략 가능
- 매개변수가 두 개 이상인 경우에는 생략 X

(int z) -> {System.out.println(z);}
z -> {System.out.println(z);}

(x, y) - > {System.out.println(x+y);}

중괄호 생략하기
return이 없는 경우
(x, y) -> System.out.println(x+y);

return이 있는 경우
(x, y) -> x + y;

함수형 인터페이스
- 객체 지향 프로그램에서 인터페이스를 사용하려면 인터페이스를 클래스에서 구현한 뒤 사용
- 람다식은 위와 같은 과정을 생략 가능
- 람다식을 이용해 인터페이스를 사용할 경우 인터페이스는 하나의 기능만을 정의 가능 ★
- 람다식을 구현하기 위해서는 먼저 인터페이스를 만든 후 인터페이스에 람다식으로 구현할 추상 메서드를 선언
- 오직 하나의 추상 메서드가 선언된 인터페이스만이 람다식의 타겟 타입이 될 수 있는데 이러한 인터페이스를 '함수형 인터페이스' 라고 함

java.util.function 패키지
- 대부분의 메서드는 타입이 비슷함
- 매개변수의 개수는 없거나 한 개, 두 개 정도 ★
- 제네릭으로 정의하면 타입이 달라도 문제X
- java.util.function 패키지에 일반적으로 자주 사용되는 형식의 메서드들을 함수형 인터페이스로 미리 정의해놓음
- 매번 함수형 인터페이스를 정의하기 보다는 가능한 이 패키지의 인터페이스를 활용하는 것이 좋음.

매개변수가 없거나 한 개인 함수형 인터페이스

Supplier		 T get()

Consumer 	void accept(T t)

Function<T,R>	R apply(T t)

Predicate		boolean text(T t)	// 조건에 넣기 가능

매개변수가 두 개인 함수형 인터페이스

BiConsumer<T,U>		void accept(T t, U u)

BiPredicate<T,U>		boolean test(T t, U  u)

BiFunction<T,U,R>		R apply(T t, U u)

매개변수가 세 개 이상일 경우
- 직접 만들어야 함



















