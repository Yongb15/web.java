내부 클래스
내부 클래스는 클래스 안에 만들어진 또 다른 클래스로 중첩 클래스라고도 부른다.
클래스에 다른 클래스를 선언하는 이유는 두 개의 클래스가 서로 긴밀한 관계를 맺고 있기 때문이다.

내부 클래스의 장점
- 두 클래스 멤버들 간에 손쉽게 접근할 수 있다.
- 불필요한 클래스를 감춰서 코드의 복잡성을 줄일 수 있다.

내부 클래스의 종류
- 인스턴스 클래스 
	ㄴ 외부 클래스의 멤버 변수(필드)와 같은 위치에 선언
	ㄴ 주로 외부 클래스의 멤버 변수와 관련된 작업에 사용될 목적으로 선언
- 정적 클래스
	ㄴ 외부 클래스의 클래스 변수와 같이 static 키워드를 부여
- 지역 클래스
	ㄴ 외부 클래스의 메서드 내부에서 선언하여 사용
	ㄴ 메서드 영역에서 선언되기 때문에 메서드 내부에서만 사용이 가능

인스턴스 클래스
- 외부 클래스 내부에서 생성하고, 선언되어 사용하는 클래스
- 필드와 같은 위치에 선언하며 외부 클래스의 필드처럼 다루어진다.
- 주로 외부 클래스의 멤버들과 관련된 작업에 사용될 목적으로 선언된다.

public class Outer {
	private String name;  // 필드

	public class Inner {
		private int num;
		
	}
}

내부 클래스도 외부 클래스 안에 생성되는 것 외에는 별도의 클래스이기 때문에 파일이 컴파일 되면 별도로 생성된다.

인스턴스 클래스의 객체화
- 인스턴스 클래스는 기본적인 내부 클래스이다.
- 외부 클래스안에 생성되기 때문에 클래스를 사용하려면 외부 클래스 객체가 생성된 상태에서 객체 생성을 할 수 있다.

Outer outer = new Outer();
Outer.Inner in = outer.new Inner();

정적 내부 클래스(static class)
- 클래스 안에 정적 변수를 선언할 수 있는 것처럼 클래스도 정적 클래스를 만들 수 있다.
- 필드와 마찬가지로 static 키워드를 사용해 클래스를 선언한 후 정적 내부 클래스를 생성한다.
- 주로 외부 클래스의 static 메서드에서 사용될 목적으로 만든다.

public class Outer {
	public static class Inner {
		private String name;
	}
}

- 외부 클래스의 필드 또는 메서드를 정적 내부 클래스 안에서 사용할 수 없다.

지역 클래스(Local class)
- 외부 클래스의 메서드 내에서 선언되어 사용하는 클래스이다.
- 메서드 내에서 선언되기 때문에 해당 클래스는 메서드 내에서만 사용할 수 있다.
- 메서드의 실행이 끝나면 해당 클래스도 사용이 종료된다.

지역 클래스의 접근 제한
- 지역 클래스는 메서드 내에서 선언되어 사용한다.
- 보통 메서드가 종료되면 클래스도 함께 종료되지만 메서드와 실행되는 위치가 다르기 때문에 종료되지 않고 남아있을 수도 있다.
- 지역 클래스에서 메서드 내의 변수를 사용할 때는 복사해 사용한다.
- 이러한 이유로 지역 클래스에서 메서드의 변수를 사용할 때 해당 변수가 변경되면 오류가 발생한다.

익명 클래스
- 다른 내부 클래스와는 달리 이름이 없는 클래스를 의미
- 익명 클래스는 클래스의 선언과 객체의 생성을 동시에 하므로 한 번만 사용할 수 있다.
- 오직 하나의 객체만을 생성할 수 있는 일회용 클래스이다.
- 따라서 생성자를 사용할 수도 없으며 둘 이상의 인터페이스를 구현할 수도 없다.

예외처리
에러(error)와 예외(exception)
- 자바 프로그램을 실행하다 보면 갑자기 프로그램이 종료되거나, 어떤 원인에 의해 잘못 동작하여 오류 메세지가 나타나는 등 얘기치 못한 오류가 발생한다.
- 전자는 우리가 해결할 수 없는 시스템 에러가 발생해 프로그램이 종료된 경위며 후자는 프로그램 사용 중 발생한 오류를 개발자가 처리해 메세지가 출력되는 경우이다.

에러(error)
- 시스템에 비정상적인 상황이 생겼을 때 발생
- 외부요인일 수도 있고 프로그램 구동 중에 발생하는 치명적인 오류일 수도 있다.
- 이러한 에러들은 개발자가 예측하거나 처리할 수 없는 영역

에러의 종류			상황
OutOfMemoryError			프로그램 실행 중 메모리 부족
IOError				입출력 에러
StackOverFlowError		가용 메모리 부족 현상

예외(exception)
- 대체로 프로그램 구동 중에 나타나는 오류들을 말함
- 문법적으로는 문제가 없어보이지만 실제 운영 중에 생기는 문제들이다.
- 체크 예외와 비체크 예외 두 가지가 있다.

체크 예외
- 자바 소스를 컴파일하는 과정에서 검사
- 문법적으로 강제하여 예외 처리를 해야 하는 경우

비체크 예외
- 컴파일 과정에서 검사하지 않으므로 사용자의 경험이나 테스트로 찾아야 하는 경우

예외 처리 문법
- 예외가 발생했을 때 처리하는 것

예외 처리 과정
1. 코드 진행 중 예외가 발생하면 JVM에게 알린다.
2. JVM은 발생한 예외를 분석하여 알맞은 예외 클래스를 생성한다.
3. 생성된 예외 객체를 발생한 지점으로 보낸다.
4. 예외가 발생한 지점에서 처리하지 ㅇ낳으면 프로그램은 비정상 종료된다.

try-catch 구문
- 예외를 처리하는 가장 기본 문법은 try-catch문이다.
- 예외가 발생할 가능성이 있는 코드는 try{}블럭 안에 작성하고 catch 메서드는 시스템으로부터 넘어오는 예외 클래스를 받아서 처리한다.

try {
  예외가 발생할 가능성이 있는 코드
}
catch {
  예외처리 코드
}

