Stream
- Java8에서 추가된 기능인 Stream은 Jav의 컬렉션 데이터에 대해 SQL 질의문처럼 데이터를 처리할 수 있는 기능을 가지고 있음

기존 루프문 처리의 문제점
- 기존 Java에서 컬렉션 데이터를 처리할 때 for, forEach문을 사용하면서 컬렉션 내의 요소들을 하나씩 다루었음
- 간단한 처리나 컬렉션의 크기가 작으면 큰 문제가 아니지만 복잡한 처리가 필요하거나 컬렉션의 크기가 커지면 루프문의 사용은 성능 저하를 일으킴

스트림의 추가
- 스트림의 추가로 컬렉션 데이터를 선언형으로 쉽게 처리할 수 있음
- 복잡한 루프문을 사용하지 않아도 되며 루프문을 중첩해서 사용해야 되는 최악의 경우도 더이상 없어짐

ex) 시간 복잡도
public void sum(int n) {
	int total = 0;
	for(int i = 0; i <= n; i++) {
		total += n;			// O(n)의 복잡도
	}
}

스트림
- 스트림은 '데이터의 흐름'
- 배열 또는 컬렉션 객체에 여러개의 메서드를 조합해서 원하는 결과를 필터링하고 가공된 결과를 얻을 수 있음
- 람다식을 이용해서 코드의 양을 줄이고 간결하게 표현 가능
- 배열과 컬렉션을 함수형 프로그래밍으로 처리 가능

스트림의 특징
- 스트림은 데이터 소스로부터 데이터를 읽기만 할 뿐 데이터 소스 변경 X
- 스트림은 한 번 사용하면 닫히기 때문에 재사용 X

스트림 사용과정
1. 생성 : 스트림 객체 생성
2. 가공하기 : 필터링(filtering), 매핑(mapping) 등 원하는 결과를 만들어가는 중간 작업
3. 결과 만들기 : 최종적으로 결과를 만들어내는 작업

만들기
- 배열 
Arrays 클래스 -> static Stream()
Stream.of(T[] t)
Stream.of(T...values)

- 컬렉션
Collection 인터페이스 - stream()

- 기본 자료형
IntStream
LongStream
DoubleStream

Stream은 Iterator와 비슷한 반복자이지만 차이점이 있음
1) 내부 반복자이므로 처리 속도가 빠르고 병렬 처리에 효율적임
2) 람다식으로 다양한 요소 처리를 정의할 수 있음
3) 중간 처리와 최종 처리를 수행하도록 파이프 라인을 형성 가능

스트림의 연산
- 중간 연산 - 연산의 결과를 Stream 타입으로 반환하는 연산
               ㄴ Stream에 연속해서 중간 연산할 수 있음

- 최종 연산 - 연산의 결과가 Stream이 아닌 연산
               ㄴ 스트림의 요소를 소모하므로 마지막에 한 번만 가능                    

ex) stream.distinct().limit(5).sorted().forEach(System.out::println);
- distinct(); limit(), sorted() -> 중간 연산
- forEach() -> 최종 연산

중간 연산 메서드					기능
Stream<T> distinct() 				중복 제거
Stream<T> filter(Predicate<T> predicate) 		조건에 맞지 않는 요소 제외
Stream<T> limit(long maxSize) 			스트림의 일부를 잘라냄
Stream<T> skip(long n) 				스트림의 일부를 건너뜀
Stream<T> peek(Consumer<T> action) 			스트림의 요소에 작업 수행
Stream<T> sorted() 					스트림의 요소를 정렬
Stream<T> sorted(Comparator <T> comparator) 		스트림의 요소 정렬
	 
스트림의 최종 연산 목록
void forEach(Consumer<? super T> action)		스트림의 요소 수만큼 반복
long count()					스트림의 요소의 개수 반환

Optional<T> max(Comparator<? super T> comparator)	스트림에서 최대 값 반환
	<? super T> 최소 T거나 T의 상위(부모)
Optional<T> min(Comparator<? super T> comparator)	스트림에서 최소 값 반환
Optional<T> finaAny() 				스트림에서 아무거나 하나 반환
Optional<T> findFirst()				첫 번째 요소 반환

스트림의 모든 요소를 배열로 반환
- Object[] toArray()					
- A[] toArray(IntFunction<A[]> generator)			

스트림에 들어있는 요소를 하나씩 줄여가면서 연산을 함
- Optional<T> reduce(BinaryOperator<T> accumlato) 	
- T reduce(T identity, BinaryOperator<T> accumlator)		

기본 타입형 스트림
- 제네릭을 사용하지 않고 직접 해당 타입의 스트림을 다룰 수도 있음
- IntStream, DoubleStream 등

스윙
- 보다 세련된 형태의 GUI(그래픽 유저 인터페이스)를 제공하기 위해 만들어진 UI 클래스의 모음

프레임
- JFrame

버튼
- JButton

이벤트와 이벤트 처리의 개념
- 사용자의 입력, 키보드나 마우스 등의 장치나 소프트웨어적으로 발생하는 모든 사건을 의미
- 이벤트가 발생하면 발생된 이벤트에 반응하여 필요한 것을 처리하는 행위를 이벤트 핸들러가 함
- 자바에서는 이벤트 핸들러는 메서드로 구현되며, 이벤트 동작에 응답하는 방식으로 처리되는 프로그램을 이벤트 지향 프로그램이라고 함
- 이벤트 지향 프로그램은 무한루프를 돌면서 사용자의 이벤트가 발생하기를 기다림
- 사용자의 이벤트가 발생하면 이벤트를 처리하고 무한루프로 대기함

리스너 인터페이스를 이용한 이벤트 처리
- 리스너 인터페이스는 이벤트와 이벤트 핸들러 사이를 연결시켜주는 역할을 함
- 이벤트가 발생한 해당 컴포넌트를 리스너에 등록시켜야 프로그램의 제어가 해당 이벤트가 제공하는 이벤트 핸들러로 옮겨짐
- 리스너 인터페이스를 이용하여 이벤트를 처리하기 위해서는 다음과 같은 순서로 프로그램을 작성해야 함

이벤트 처리 순서
1) 발생하는 이벤트를 처리할 이벤트 종류 결정
2) 이벤트 처리에 적합한 리스너 인터페이스를 사용하여 클래스를 작성
3) 이벤트를 받아들일 각 컴포넌트에 리스너 등록
4) 리스너 인터페이스에 선언된 메서드를 오버라이딩하여 이벤트 처리 루틴 작성







































