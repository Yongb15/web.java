자식 객체의 메서드가 먼저 호출되는 이유
	- 메서드가 실행 시점에서 성격이 결정되는 동적 바인딩 때문이다.
	- 프로그램의 컴파일 시점에 부모 클래스는 자신의 멤버함수 밖에 접근할 수 없으나 실행 시점에서 동적 바인딩이 일어나 부모가 자식 클래스의 멤버 함수를 접근하여 실행

동적 바인딩의 작동
1. 클래스 계층구조
	- 자바에서 동적 바인딩은 클래스 계층 구조에서 발생한다.
	- 상속하거나 인터페이스를 구현함으로써 계층을 갖는다.
	- 이 계층에서 오버라이딩이 가능하기 때문이다.

2. 메서드 오버라이딩
	- 자식 클래스는 부모 클래스의 메서드를 재정의 할 수 있다.
	- 자식 클래스에서 부모 클래스의 동일한 함수명, 매개변수를 재정의한다.

3. 실행시 동적 바인딩
	- 객체가 생성되고 메서드가 호출될 때, 실제로 실행될 메서드는 객체의 실제 타입에 따라 결정된다.
	- 메서드 호출시 객체의 클래스 타입을 기반으로 어떤 메서드를 호출할지 동적으로 결정된다.

클래스의 강제 타입변환
- 부모타입으로 변환을 했지만 자식 클래스의 멤버에 접근하고 싶을 때가 생길 수 있다.
- 자바의 규약으로 자식 클래스의 멤버에 접근할 수 없으므로 이러한 경우 자식 타입으로 변경해서 접근할 수 있도록 해야 한다.
- 부모 타입으로 변환 후, 다시 자식 타입으로 변환하는 것

일회성으로 타입 변환이 필요할 때

((자식 타입)객체).메서드명();

자식 클래스의 멤버에 접근이 여러번 필요한 경우
변수명 = (자식 타입)객체;

인터페이스
- 모든 메서드가 추상 메서드인 추상 클래스를 '인터페이스'라고 부른다.
- 인터페이스는 추상 메서드와 상수로만 이루어져 있다.
- 추상 클래스와 마찬가지로 스스로 객체를 생성할 수 없다.
- 추상 클래스와 같은 역할을 하는 것처럼 느껴질 수 있지만 추상 클래스는 자식 클래스들의 공통적인 특징을 추출하고 제공하는 것이 주된 역할이었다면 인터페이스는 그 뿐 아니라 다른 클래스 코드들과 중간 매개 역할을 하는 것을 중점으로 할 수 있다.
