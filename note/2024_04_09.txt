List 컬렉션
- List는 배열과 유사한 자료구조로 중복이 허용되면서 저장 순서가 유지되는 구조를 제공
- 그렇게 때문에 배열처럼 index를 사용해 데이터를 저장하거나 찾을 수 잇다.
- 배열과는 다르게 크기의 제한이 없으며 삽입, 삭제, 변경의 기능이 자유롭다
- 데이터의 크기를 특정할 수 없는 다량의 데이터를 저장할 때 용이하게 사용

List가 제공하는 주요 메서드
메서드			동작			기능
void add(E e) 		삽입		데이터를 순차적으로 삽입		// E(Element)는 제네릭 타입
void add(int index, E e)	중간 삽입		원하는 index 위치에 삽입
void set(int index, E e)	치환		index 위치의 값을 변경
E get(int index)		반환		index 위치에 해당하는 값을 반환
E remove(int index)	삭제 		index 위치에 해당하는 값 삭제
void clear()		전체 삭제		모든 데이터 삭제
int size()			크기		저장된 데이터의 개수 반환
boolean contains(Object o)	검색		데이터 존재 여부 확인

ArrayList
- 가장 많이 사용하는 List 인터페이스의 구현 클래스
- 내부적으로 배열을 이용해 구현되어 배열과의 호환성이 좋은 자료구조이다.

Set
- List와 다르게 객체의 순서를 저장하지 않음.
- 수학의 집합과 유사한 개념을 지니고 있음
- 데이터의 중복을 허용하지 않는다.
- 데이터를 저장할 때 순서, 즉 index가 없어서 데이터가 입력된 순서대로 출력된다는 보장이 없음

메서드				기능 설명			
void add(E e)			데이터를 순차적으로 삽입
void remove(Object o)		선택된 값 삭제
void clear()			모든 데이터 삭제
int size()				저장된 데이터의 개수 반환
boolean contains(Object o)  		데이터 존재 여부 확인

HashSet
Set 인터페이스에서 가장 많이 사용되는 클래스로 인터페이스를 구현한 클래스






