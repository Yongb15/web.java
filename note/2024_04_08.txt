StringBuilder / StringBuffer
- String 클래스는 최초 지정된 문자열 이후에 값이 추가되면 내부적으로 새로운 메모리를 할당해 새롭게 문자열을 등록
- 문자열을 많이 사용할수록 메모리 사용이 늘어나 메모리가 낭비될 수 있다.
- StringBuffer와 StringBuilder는 내부에 여유공간을 두기 때문에 문자열을 합칠 때 메모리에 새롭게 생성하는 과정을 String보다 현저히 생략할 수 있다.
- StringBuffer와 StringBuilder는 사용하는 기능측면에서는 차이가 없으나 StringBuffer의 경우 스레드 환경에서 안정성을 추가로 가지고 있다.
- 스레드 환경이 아닌경우 StringBuilder의 성능이 좋으므로 일반적인 프로그래밍에서는 StringBuilder를 사용하는 것을 권장
  (멀티)

StringBuilder의 메서드
- append(String str) : 기존 문자열 뒤에 더하여 반환
- delete(int start(이상), int end(미만)) : 시작 위치부터 끝 위치 전까지 삭제
- insert(int offset, String str) : 시작 위치부터 문자열을 삽입
- reverse() : 문자열을 거꾸로 출력

컬렉션 프레임워크
- 배열은 한 번 정한 크기를 변경하거나 삭제할 수 없다.
- 또한 별도의 기능이 없기 때문에 직접 index를 이용해 데이터를 저장해야 한다.
- 자바는 이러한 불편함을 해결하기 위해 필요한 자료구조를 미리 구현하여 java.util 패키지에서 제공하고 있다.
- 컬렉션은 기존에 있던 자료구조 List, Queue, Tree 등의 자료구조를 의미한다.
- 프레임워크는 클래스와 인터페이스를 묶어놓은 개념

List : 순서가 있는 데이터의 집합 / 데이터의 중복 허용 O
Set : 순서를 유지하지 않는 데이터의 집합 / 데이터 중복 허용 X
★Map : 키(Key)와 값(Value)의 쌍으로 이루어진 데이터의 집합


제네릭
- 일반적인(범용성있는) 코드를 작성하고 이 코드를 다양한 타입의 객체에 대하여 재사용하는 객체지향기법입니다.
- 객체의 타입을 컴파일할 때 체크하기 때문에 객체의 타입에 대해 안정성을 높히고 형변환을 하는 번거로움을 줄일 수 있다.
- JDK 1.5부터 도입된 제네릭을 사용하면 컴파일할 때 미리 타입이 정해지므로 타입 검사나 변환과 같은 번거로운 작업을 생략할 수 있다.

제네릭 메서드
- 메서드의 선언부에 제네릭 타입이 선언된 메서드
- 선언 위치는 반환형 앞이고 작성한 제네릭 타입으로 반환형, 매개변수 타입이 결정
