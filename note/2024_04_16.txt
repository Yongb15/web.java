문자 기반 스트림에서 제공하는 메서드

int read()
- 1개의 문자를 읽고 반환
- 더 이상 읽을 문자가 없으면 -1반환

int read(char[] buf)
- 배열에 읽어온 문자를 저장

close()
- 스트림 종료
- 자원 반환

보조 스트림
- 스트림은 기능에 따라 기반 스트림과 보조 스트림으로 구분
	ㄴ 기반 스트림 - 대상에 직접 읽고 쓰는 스트림
	ㄴ 보조 스트림 - 직접 읽고 쓰는 기능은 없지만 기반 스트림에 추가로 사용 할 수 있는 스트림
- 보조 스트림은 실제로 데이터를 주고받을 수 없음
- 스트림의 기능을 향상시키거나 새로운 기능을 제공해주는 스트림으로 다른 보조 스트림과 중첩하여 사용 가능

보조 스트림 연결
- 보조 스트림을 사용하려면 기반 스트림을 매개변수로 받아야 하기 때문에 기반 스트림이 먼저 선언 되어야 함
- 보조 스트림은 스스로 데이터를 읽거나 쓸 수 없기 때문에 입출력과 바로 연결되는 기반 스트림이 필요함

보조스트림 변수명 new 보조스트림(기반스트림 객체)

성능향상 보조 스트림
- 느린 하드디스크와 네트워크는 입출력 성능에 영향을 줌
- 입출력 소스와 직접 작업하지 않고 버퍼라는 메모리를 이용해 작업하면 실행 성능 향상 가능
- 버퍼의 크기가 작아 많은 양의 데이터를 처리하기에는 부족
- 보조 스트림 중에는 다음과 같이 메모리 버퍼를 추가로 제공하여 스트림의 성능을 향상시키는 것들이 있음

바이트 기반의 스트림
- BufferedInputStream, BufferedOutputStream

문자 기반의 스트림
- BufferedReader, BufferedWriter

문자 변환 보조스트림
- 바이트 기반의 스트림으로 텍스트 파일을 읽거나 쓸 경우 한글을 포함한 비영어권 문자들이 정상적으로 출력X
- 소스 스트림이 바이트 기반의 스트림이고 입출력 데이터가 문자라면 Reader와 Writer로 변환하여 사용하는 것을 고려해야 함
- Reader와 Writer는 문자 단위로 입출력 하기 때문에 바이트 기반의 스트림보다 다양한 문자를 입력할 수 있기 때문

열거형
- 상수를 가지고 생성되는 객체들을 한 곳에 모아둔 하나의 묶음
- index 값을 가짐
- 클래스처럼 보이게하는 상수
- 서로 관련 있는 상수들을 모아 정의

Enum 클래스가 컴파일 될 때 자동으로 추가되는 메서드
name()
- 열거형의 상수의 이름을 문자열로 반환

ordinal()
- 열거형 상수가 정의된 순서를 반환

valueOf("상수명")
- String값을 enum에서 가져온다 / 값이 없으면 예외 발생

valueOf(item.class. "상수명") 
- 넘겨받은 class에서 상수명을 찾아서 가져옴

values() 
- 열거형 상수 안에 들어있는 내용들을 enum 타입의 배열로 반환

어노테이션
- 프로그램의 소스코드 안에 다른 프로그램을 위한 정보를 미리 약속된 형식으로 포함시킨 것
- 어노테이션은 주석(comment)처럼 프로그래밍 언어에 영향을 미치지 않으면서도 다른 프로그램에게 유용한 정보를 제공할 수 있는 장점이 있음
- 어노테이션의 뜻은 주석, 주해, 메모임

표준어노테이션(자바에서 기본으로 제공)
- @Override
        ㄴ 컴파일러에게 재정의된 메서드를 알림
- @Deprecated
        ㄴ 앞으로 사용되지 않을 것을 권장하는 대상에게 붙임
- @SupperessWranings
        ㄴ 경고 무시
- @SafeVarargs
        ㄴ (매개변수에 가변인수를 쓸 때 발생하는 예외를 억제할 때) 경고 무시
- @Functionallnterface
        ㄴ 함수형 인터페이스로 사용

메타어노테이션(어노테이션을 만들기 위한 어노테이션)
- 스프링에서는 어노테이션으로 코드를 많이 통제함
- java.lang.anotation 패키지에 정의되어 있음

- @Target
        ㄴ 어노테이션이 적용 가능한 대상을 지정하는데 사용
        ㄴ 어노테이션을 붙일 수 있는 대상을 지정
        ㄴ 특정 필드, 메서드, 매개 변수, 생성자에 가능

- @Retention
        ㄴ 어노테이션이 유지되는 기간을 지정하는데 사용 

- @Retention(SOURCE)
        ㄴ 소스 코드에만 이용 가능하며 컴파일 후에는 사라짐

- @Retention(CLASS)
        ㄴ 어노테이션이 .class 파일에 존재하지만 런타임에는 사라짐

- @Retention(RUNTIME)
        ㄴ 컴파일러와 런타임에 사용 가능

어노테이션 생성 방법
- @ 기호를 붙이는 것을 제외하면 인터페이스를 정의하는 것과 동일
	ex) @Override의 @는 어노테이션이고 Override는 어노테이션의 '타입'이라고 함

- @interface 어노테이션타입 {
		
  }