클래스
실행용 클래스
- main 메서드
- 다른 곳에서 참조되지 않는다.

참조용(객체 생성용) 클래스
- 객체를 생성하기 위한 클래스
- 다른 곳에서 참조가 된다.
- 필드, 메서드

객체(인스턴스)

객체 -> new 클래스명();

인스턴스변수(iv) = new 클래스명();

메서드 : 클래스안에 정의된 함수

메서드의 정의는 메서드 밖에서 해야한다.
메서드의 호출은 메서드 안에서 해야한다.

접근제한자 반환형(정수, 실수, 문자, void, 클래스명) 메서드명(매개변수)
{

}

생성자
- 클래스를 구성하는 구성 요소 중 하나인 생성자는 객체를 생성할 때 호출되어 객체의 초기화를 담당하는 특별한 메서드
- 객체를 생성하고 초기화하기 위해서는 반드시 생성자를 호출해야 한다.
- 따라서 객체를 생성해야 하는 참조용 클래스는 모두 생성자를 가지고 있다.

생성자의 정의
- 생성자는 반환값이 없지만 반환형을 아예 적지 않는다.(void도 적지 않는다.)
- 생성자는 초기화를 위한 데이터를 인수로 전달받을 수 있다.

접근제어자 클래스명(매개변수)
{

}

생성자 호출 위치
일반 메서드들과는 다르게 생성자를 호출하는 곳이 정해져잇다.
생성자는 클래스를 기반으로 객체를 생성할 때, 객체의 초기화를 담당하는 역할을 하므로 객체를 생성할 때만 호출할 수 있다.

생성자 호출 방법
- 생성자를 호출할 때는 new 키워드를 함께 쓴다.
클래스명 객체명 = new 클래스명();	/	클래스명이 생성자!

기본 생성자
- 자바의 모든 클래스에는 하나 이상의 생성자가 정의되어 있어야 한다.
- 클래스를 생성하면서 개발자가 직접 생성자를 선언하지 않았지만 자바 컴파일러가 기본 생성자를 자동으로 제공해주고 있다.
- 다만 컴파일러에만 보일뿐 우리가 보는 코드에는 생략되어 있다.

public 클래스명()
{

}

- 기본 생성자는 파라미터가 별도로 없으며, 코드블럭 안에 코드가 없는 생성자를 말한다.
- 기본 생성자는 개발자가 직접 선언하지 않았을때만 자동으로 추가해준다.
- 만약 개발자가 직접 생성자를 선언한다면 컴파일러는 선언된 생성자를 사용한다.

생성자 선언 이유
- 생성자는 객체를 생성함과 동시에 객체를 초기화 할 수 있다.
- 생성자를 통해 객체를 초기화 한다는 것은 필드와 메서드를 호출하는 등 객체를 사용하기 위해 객체를 메모리에 올린다는 뜻이다.
- 생성자를 통해 객체를 메모리에 올림과 동시에 더 나아가 객체 멤버에 접근이 가능하므로 일반적인 메서드처럼 객체 멤버의 데이터를 초기화 할 수 있다.
- 메서드를 호출해서 파라미터에 값을 전달했던 것처럼 생성자 역시 파라미터를 통해 값을 전달할 수 있다.

오버로딩(Overloading)
- 메서드의 중복정의
- 하나의 메서드명으로 여러 기능을 구현하는 것

오버로딩의 조건
1. 메서드의 이름이 같아야 한다.
2. 매개변수의 개수가 달라야 한다.
3. 매개변수의 개수가 같아도 타입이 달라야 한다.
4. 매개변수의 개수가 같아도 순서가 다르면 된다.